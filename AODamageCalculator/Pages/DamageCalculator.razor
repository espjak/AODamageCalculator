@using AODamageCalculator.Data
@using AODamageCalculator.Services
@inject IDamageCalculatorService _calcService
@inject IDialogService DialogService


<MudGrid Spacing="2" Class="pa-4">
    <WeaponInputs Title="Main hand" Weapon="@_weaponSet.MainHand" OnWeaponQlChange="@MainHandWeaponQlChanged" OnWeaponChange="@MainHandWeaponChanged" SearchFunc="@SearchWeapons"></WeaponInputs>
    <WeaponInputs Title="Off hand" Enabled="@_weaponSet.OffHandInUse" Weapon="@_weaponSet.OffHand" OnWeaponQlChange="@OffHandWeaponQlChanged" OnWeaponChange="@OffHandWeaponChanged" SearchFunc="@SearchWeapons"></WeaponInputs>
    <MudItem xs="3">
        <MudText Typo="Typo.h5">Player info</MudText>
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.CritChance" Label="Crit chance" Variant="Variant.Text" Min="0" Max="100" />
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.AttackRating" Label="Attack rating" Variant="Variant.Text" />
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.AddDamage" Label="Add damage" Variant="Variant.Text" />
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.AggDef" Label="Agg/def" Variant="Variant.Text" />
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.Initiatives" Label="Initiatives" Variant="Variant.Text" />
        <MudNumericField HideSpinButtons="true" @bind-Value="_playerInfo.TargetAC" Label="Targets AC" Variant="Variant.Text" />
    </MudItem>
</MudGrid>
<MudButton Variant="Variant.Filled" OnClick="CalculateAndDisplayResult">Calculate</MudButton>

@code {
    private PlayerInfo _playerInfo = new PlayerInfo();
    private WeaponSet _weaponSet = new WeaponSet();
    private CalculationResult _result;
    private WeaponService _weaponService = new WeaponService();

    public void MainHandWeaponChanged(WeaponInfo weaponInfo)
    {
        WeaponChanged(weaponInfo, _weaponSet.MainHand);
    }

    public void MainHandWeaponQlChanged(int ql)
    {
        WeaponQlChanged(ql, _weaponSet.MainHand);
    }

    public void OffHandWeaponChanged(WeaponInfo weaponInfo)
    {
        WeaponChanged(weaponInfo, _weaponSet.OffHand);
    }

    public void OffHandWeaponQlChanged(int ql)
    {
        WeaponQlChanged(ql, _weaponSet.OffHand);
    }

    private void WeaponChanged(WeaponInfo weaponInfo, Weapon weapon)
    {
        var ql = weaponInfo.QlRange.Min;
        var weaponDetails = _weaponService.GetWeaponDetails(weaponInfo.Name, ql);
        weapon.UpdateWeapon(weaponInfo, weaponDetails, ql);
    }

    private void WeaponQlChanged(int ql, Weapon weapon)
    {
        var weaponDetails = _weaponService.GetWeaponDetails(weapon.Name, ql);
        weapon.UpdateWeapon(weapon.WeaponInfo, weaponDetails, ql);
    }

    private void CalculateAndDisplayResult()
    {
        _result = _calcService.Calculate(_weaponSet, _playerInfo);
        var parameters = new DialogParameters();
        parameters.Add("Result", _result);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        DialogService.Show<ResultDialog>("Result", parameters, options);
    }

    public IEnumerable<WeaponInfo> SearchWeapons(string value)
    {
        return _weaponService.SearchWeapons(value); 
    }
}
